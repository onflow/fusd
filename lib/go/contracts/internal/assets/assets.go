// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../contracts/FUSD.cdc (7.395kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _fusdCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x59\x5f\x73\xdb\xb8\x11\x7f\xcf\xa7\xd8\xbb\x87\x46\x9e\x73\xa4\x3c\x74\xfa\xe0\x89\xef\xce\xd7\xd8\x9d\x4c\xdb\xd4\x13\x27\xbd\xc7\x1b\x90\x5c\x49\x68\x48\x80\x05\x40\xc9\xba\x9b\x7c\xf7\xce\x2e\xfe\x10\xa0\x28\xd9\x9e\xfa\xc5\x12\x89\xfd\x83\xdd\xdf\xee\xfe\x00\xc9\xae\xd7\xc6\xc1\xdd\xa0\x36\xb2\x6a\xf1\xb3\xfe\x8a\x0a\xd6\x46\x77\xf0\xf6\xf1\xee\xcb\xc7\xbf\x7d\xf8\xe5\x1f\xb7\x9f\xff\xf5\xf7\xdb\x8f\x37\xef\xdf\x7f\xba\x7d\x78\x78\xf5\xaa\x1f\x2a\xa8\xb5\x72\x46\xd4\x0e\xee\xbe\x3c\xbc\xbf\x9a\x48\xff\xf1\xea\x15\x00\xc0\x6a\x05\xb7\x3b\x54\x0e\xdc\x56\x38\x90\x16\xb0\x93\xce\x61\x03\xfb\x2d\x2a\x70\x5b\x1c\xb5\x48\x0b\xb5\x41\xe1\xb0\x61\x49\xb2\x80\x2c\xca\x0a\xed\x07\x25\x9d\x14\xad\xfc\x1d\x9b\x85\xf4\x9f\x1f\x86\xbe\x6f\x0f\x57\xf0\xe5\x4e\x3e\xfe\xe5\xcf\x17\xcf\xb2\xc8\xba\x40\x18\x84\xbd\x74\xdb\xc6\x88\x7d\xd8\xa9\x80\x7f\x8b\xa1\x75\xb3\xb6\x7f\x8d\x4b\x17\xa2\xd3\x83\x72\xd1\xe4\x25\x8b\x5e\xc1\x4d\xd3\x18\xb4\xf6\xa7\x97\xba\xd0\x60\xaf\xad\xa4\x37\x4e\x9f\x75\xe0\x7d\x5c\x78\xe4\x80\xd3\x2f\x34\xaf\x70\x9f\xbb\xd0\x49\x75\x2a\xe2\xff\xe4\x57\x13\x8b\xa3\x8d\xcf\x5b\x04\xeb\xb4\x11\x1b\x84\x5e\xb8\x2d\xac\xb5\xe1\x8c\x8a\xa6\x93\x0a\x0c\x5a\x3d\x98\x1a\x93\xea\x16\x1d\xdc\xd0\xab\x07\x2f\x74\x2f\xdc\xf6\x0a\xb2\x2f\xb3\x9a\xef\xa3\x66\x76\xd4\xd8\xd7\xc0\x6e\x99\x7b\xa3\x1f\x0f\x85\xee\xec\xf9\xb3\x2c\xf4\x43\xd5\xca\x7a\x74\x7d\xce\x00\xd4\xa2\x17\x95\x6c\xa5\x3b\x69\xeb\x9e\xd5\x78\x53\xe3\xe7\xe7\x64\x42\x70\x2e\xbc\xd9\x14\xae\xd3\x65\xe0\x6d\xfe\xd5\xbf\x5b\x64\x79\xd0\x4e\xb4\x60\xb9\x16\x40\xaf\x61\x3d\xd8\x06\xa4\x02\x7c\x94\xd6\xa1\xca\x32\xb0\x13\x06\x1c\xad\x2e\x0b\x27\x69\x1a\xf1\xb7\x5a\x25\xff\x45\xbd\x85\xc1\xa2\xe1\x8c\xa0\x05\xa1\x40\x2a\xeb\x84\xaa\x91\xac\x69\xd5\x1e\x38\xeb\x2c\x4c\x76\xdd\x16\xa5\x89\xf9\xcb\x03\xbe\x1e\x54\xed\xa4\x56\x36\xac\x0a\x22\x84\xc2\x8d\xde\xa1\x51\xd8\x40\xe5\x95\xf5\x06\x41\xa8\x06\x7a\x6d\x1d\x75\x88\x46\xb2\x60\xd4\x26\xd5\xa4\xdb\xc4\x6e\x72\x60\x6d\xb5\x68\x5b\x6c\x96\xb9\xed\x7a\x8b\xf5\x57\x0b\x5b\xd1\xf7\x14\x79\x07\x66\x50\x4e\x76\xc8\x92\xb8\x43\x03\x22\xf9\xc7\x29\x28\x54\x44\x4d\x9f\x42\x92\xe8\xbd\xf2\x5b\xaf\x30\xa6\x2b\xee\x8a\x1a\x1a\x3e\x3a\x0a\x4e\xd1\xdf\x18\x03\xe4\x63\xd4\xe6\x3b\xc0\x5a\x2a\x96\xbd\x04\xab\xe9\xb5\x61\x08\x28\x0d\x7b\x71\x60\x5c\x0a\xe8\x44\x2b\x6b\xa9\x07\xeb\x13\xe1\x74\x30\xe9\x03\x98\xa2\xa2\x87\x60\x54\x2a\x10\xd2\x2c\xe1\x06\x6c\x8f\xb5\x14\x6d\xc0\xce\x08\x32\x85\xd8\x58\x52\x54\x8d\x2e\x38\xcd\x58\x8c\xda\xc6\x3e\x51\x44\x81\x70\x94\xd4\xb0\xfd\x49\xe7\x5f\xde\x1b\xbd\x93\x0d\x9a\xcb\xc9\xf3\x4f\x58\xa3\xdc\x1d\x3f\xff\x45\xb4\x0c\xa6\x30\x31\x82\xf9\xad\x6e\xc9\xc3\x2d\x42\x15\xde\xeb\x35\x08\x0e\x80\x0d\x7e\xa5\xe5\x11\xdb\x61\x65\x89\xeb\x04\x99\x38\x3e\x0a\xa5\x84\x84\xb8\x1b\x0e\x2a\xe5\x9f\x80\x91\x64\x49\x70\x31\xd1\x7c\x01\x7f\xa4\xf7\xf4\x67\xb1\x5d\x2f\xa3\xca\xeb\xa8\x3c\x2d\xf9\x56\x78\x12\xe7\x4e\xf6\x2c\x7f\x7d\x17\x51\xe8\xf1\x22\xbe\xc6\x9a\x73\xb8\x21\x98\x72\x37\x06\xc1\x0f\x85\xd9\x0c\x1d\x86\x9c\x45\x54\xa9\x26\x99\xb0\x5e\x49\x90\xe1\x31\x97\xea\x6e\x99\x0b\x7d\x70\x01\x52\x36\x74\x25\x87\x44\x09\x84\x39\x84\x22\x8d\x0d\x6c\xb0\x1e\x29\x94\x9e\x5c\x01\xa9\xed\xb4\xc2\x43\x5a\x59\xa1\x54\x1b\x70\x46\x28\xbb\x46\x63\xb0\x59\x92\x15\x83\x6e\x30\xca\x27\x56\xe1\xbe\x3d\xe4\x4a\x62\x21\x05\x93\xba\x28\x27\xd6\xeb\xcb\x92\x2a\x45\x3a\xae\xc1\x2a\x1b\xa2\xb9\x2a\x6c\x2d\xee\xa9\x98\x96\x73\x61\x26\xc0\xac\x07\x95\xe2\x34\x9d\x71\x57\xf0\x73\x89\x51\xef\xd1\xd9\xa4\x17\x5f\xdf\x84\x98\x17\x02\xd4\xfc\x4f\x12\x0a\xff\x3f\x12\x0a\x56\xa6\xf7\x0a\xcd\x4f\x4b\xe1\xa7\xfb\x45\xa1\xcb\xc7\x11\xde\xbd\xc9\x3b\xc1\x08\x53\xaf\xed\xe2\x04\x02\x43\xc4\x5e\x02\xc0\x90\x13\x5d\xfd\x07\xeb\x29\xfa\x18\x72\xa2\x69\x6c\x51\x6f\xce\xa6\x22\x0b\x99\xcc\x0a\x99\xbe\xf2\xf6\xec\x3c\x18\xa5\x05\xd1\xb6\x7a\xef\xc1\xd6\xa0\x75\x46\xfb\xc9\x60\xc9\xa0\x77\xa6\xc2\x5a\x0c\x16\x47\x48\x17\x55\x46\x3e\x66\x30\x26\xc0\xa2\x89\xb6\x43\x63\xe3\xd1\xc0\xa2\xaf\x47\x6f\xb7\xa2\xd8\x48\x85\xa8\x08\x84\x76\xe8\xb0\xe1\xad\x72\x93\x5e\x6b\x1e\x34\x01\x81\xec\x5f\x9c\x17\x39\xc2\x42\xa8\x17\x3e\xad\x73\xa8\x9a\xf6\x12\xa2\x17\x3b\xde\xdf\xbb\x37\x81\x99\xda\xef\xe0\x67\xe2\xd8\xcb\x72\x97\x4f\x81\xf0\x07\xaf\x67\x39\x6d\x47\x13\x2c\x1e\x73\xcb\x42\xcc\x53\xcc\x27\x01\x59\xc8\xc0\x35\xbc\x5d\xbe\x2d\xde\xc7\x1c\xee\x8a\x2d\x64\xb8\x0c\x0b\x16\xd3\x78\xf0\xc6\x33\xd6\x02\xd7\xc7\x8f\xde\x14\x1b\xcf\xb4\x67\x36\x52\x7f\xb9\xed\x7a\x77\x98\xa3\x3a\x25\xf0\xcb\x7e\xe8\x11\x47\xfd\x02\x44\x0e\xe4\xdf\xd1\xe8\x34\xcf\x55\x93\xfa\x9b\x1c\xfb\x97\x68\x5b\xea\x84\xa1\x8f\xd1\x54\xe6\x29\xde\x0d\xd6\xf7\x33\x1a\xd8\x36\x91\x8f\x5c\x19\x33\x2e\x56\xe2\xd5\xa6\xd6\x38\x65\x59\xf4\x40\x9b\xc6\x73\x03\x2e\x1c\xff\x3e\x29\xab\x6b\x9e\x00\x7e\xe0\x8b\xaa\xe5\x9a\x34\x7e\x20\x47\x8c\xda\x40\x1e\xc2\x78\x05\x77\xe8\xf1\x68\xf4\x13\xa6\xa7\x61\x5c\x70\xbf\x4c\xf8\xcc\xf2\xf7\x44\x97\x7a\xbb\x7c\x7b\x31\x49\x91\x27\x2a\x27\x68\x57\x6c\x3f\x61\x14\x28\xe6\x2b\x33\x44\x85\xcb\xda\x9f\x42\x02\x69\xe5\x6d\x31\xa1\x14\xd6\x62\x9e\x9e\x40\xbf\x63\x84\xb8\x6b\x8c\xa4\x1f\xf6\x86\x18\xe3\xc8\x9c\x4e\x73\xa1\x40\xb1\x4a\x16\x43\xda\x3f\x97\x64\xe5\x5c\xb3\xa5\xe5\x36\xdb\xd0\x25\xb7\x55\xf2\xb3\x8b\xfe\xba\x8c\xed\x5f\x4e\xe7\x7e\x36\x5d\xbb\x53\xf8\x3b\x37\x0f\x47\x77\xe7\x26\xe2\x5c\x86\x59\xda\xe0\xe4\x09\xfd\x05\xd2\xf1\x23\x65\xf9\x0a\xbe\xbf\xf1\x5f\xfd\x71\xd3\x83\xbf\x42\xd8\x30\x2e\xe8\xd8\x28\x14\xd7\xd2\xf7\x85\x9e\x6f\x2f\xee\x04\x3f\x3c\x31\x78\x27\x67\xda\xe9\x9c\x7c\x06\x68\x4f\x8c\xd6\xf0\xaf\x80\x04\x23\x62\x2d\x12\x38\xb2\xf3\x62\x16\xb0\x18\x7c\x8b\x2e\x1c\xf1\x12\xfc\x16\xb5\xe8\xaf\x60\xfc\xfe\xee\x4f\x7e\xc5\x8f\xf3\x65\x33\x9e\x89\x4f\xd7\x0e\xcd\x41\x82\x43\x81\xf2\x54\x50\x15\x26\x86\x77\xae\xb6\xd2\x0e\xc3\x99\x86\x0f\x4c\x49\x9b\xc1\xde\x20\xcd\x69\x3b\x0e\xc8\x16\xdd\x78\xba\xe3\xd2\xcc\xce\x72\xa9\x75\x0d\x4a\xb6\x84\x07\xd1\xb6\xa4\x66\xa7\xbf\xfa\x02\x65\xfc\x8e\x06\xe4\x9a\x0f\x30\x34\x6f\x4f\xd5\x21\x87\xe2\x6a\x36\xee\x45\xd1\xd4\x35\x5a\xbb\xa0\xe9\x71\x41\xac\x52\xe9\x4a\x37\x07\x66\x8f\xec\x7b\xad\xfb\x43\xa8\xa2\x64\x9d\x0a\x8d\x68\x87\xcc\x6a\xa9\xd0\x43\x47\x91\x6e\x92\xc9\xd9\x2c\xfe\x54\xf8\x72\xa3\x0e\x5a\x05\xb3\x71\x2c\x5c\x42\x45\x87\xba\x78\xc6\xf6\x3d\x8d\x57\x78\x6c\x86\xa6\x93\xbc\x93\x68\x8b\xa6\x60\x43\xd3\x38\xf4\x08\xf6\x60\x1d\x76\x4c\x65\x9c\x11\x52\xd9\xd8\xec\x03\x55\x0f\xdc\x3a\xcf\xd1\x31\x9f\x79\x11\x48\xe7\x08\xf3\x34\x30\x70\x4d\xde\xcf\x11\x82\xff\xaf\x29\xa5\x2a\x9e\x37\xfb\x5d\xb1\x78\x59\x69\x63\xf4\x7e\x71\x31\x79\x7c\x6c\xfa\x0c\xb1\xe6\x83\xe2\x73\xf7\xac\x64\x7b\xa2\x83\x24\x9e\x72\xba\xa6\x4f\x11\x95\x4c\x22\x95\xeb\x69\x54\x51\x96\xcb\xab\x2e\xa5\xb4\xef\xd0\x4c\x74\xf4\xe0\x92\xce\x0c\xff\x97\x39\x43\x99\x41\x66\xef\x8f\xff\xec\xdb\x19\xfa\x90\x59\x66\xfe\x90\x7b\x32\x43\x20\x4a\xc0\x07\xb1\x49\xd8\xf8\x72\x51\x12\xb8\x9d\x9e\x52\x88\x9b\x49\xcf\x62\x92\x64\xb3\x0b\xb8\x78\x1b\x92\xdf\xbd\x8d\xe2\xbf\x22\xec\x65\xdb\xfa\xfd\xee\x85\xa2\x9a\x4c\xdc\x61\xad\x0d\x28\xbd\xf7\x51\xed\xe4\x66\xeb\xb8\x3d\x31\x17\x6b\x1a\xd0\xc4\x1e\xfa\x56\xb0\x69\xec\xa8\xe1\xad\x07\x37\x18\x2c\x5a\xaa\xdf\xd8\x2a\x84\xdb\xc7\xc1\x3a\x33\xd4\xb4\x12\x50\x11\x69\xf3\x15\x9b\xc4\x3e\x34\xc8\x8d\x72\x8f\xb0\xd7\x43\xdb\xc4\x18\x71\x59\x8f\xb2\x52\x81\x00\x2b\xd5\xa6\x1d\xaf\xe0\x2e\x61\x83\x0a\x8d\x5f\xed\xaf\x6f\xed\x78\x3f\x10\x08\x7e\x9e\xe8\x5a\xd4\xf4\x82\x42\x10\x48\xa2\x54\x6b\x6d\xba\x70\x61\xa2\x83\x87\x80\xc2\xfa\xce\x5d\xfb\x37\x14\x92\x07\x67\xa4\xda\xac\xf8\x26\xb7\xd6\xdd\x0e\x8d\xf5\xb7\x6c\xea\xb5\x83\x03\x3a\x66\x33\xda\xb8\xc9\x7d\x5b\xd1\xd5\x8b\xdc\x4e\x9a\xb8\xdf\xf6\x47\xdc\x67\xe4\x11\x9e\x60\x5a\xd3\xa2\x99\x10\xbc\x94\x18\x8a\xe4\x96\x83\x5b\xf9\x3b\x69\x3a\x03\x52\x5d\x0c\x4a\xfe\x77\x08\x17\xdf\x81\x67\x12\x11\x77\xfe\x62\x37\x9f\xad\x7c\x57\xe1\x79\x64\x53\xde\x48\x95\x25\x1b\x00\x18\x8c\xf0\xdb\x92\x9c\xbe\xb6\xd1\xcc\xb1\x93\xd2\x42\x43\x90\x0c\xdd\x7b\xc2\x6a\xcd\xa0\x94\x54\x9b\xab\xe2\xc6\xc6\x08\x65\x85\xbf\x90\x5d\xad\x07\xdb\xac\xbc\xd0\xca\xa2\x1b\xfa\xdf\xe8\xc9\x6f\xfe\xc9\xb2\x6e\xea\xc9\x5d\x8f\xca\x8a\xfe\x65\x46\x58\x66\x15\x8e\x1c\x67\xac\x1c\x8d\x81\x49\x96\xb3\xa6\x31\x69\xb9\xcc\xf6\xa6\x97\xe5\xf9\x82\x13\x4d\x65\x71\x8a\xd3\x1d\x35\x76\x6e\xea\xd3\x9f\x32\xe0\x1a\x56\x21\x3d\xbc\xd3\x9b\x44\x72\x92\xc8\xec\xaf\x06\x24\xe7\x7f\x8a\x60\xb1\x69\xd7\x9f\x13\x3e\x63\x35\x17\x2f\xe5\x4b\xe2\x4c\xc7\xf3\xf4\xbe\x45\x17\x72\x39\xc6\xa4\x28\xb8\x2c\x34\xac\x2b\xa4\x7c\x69\xc5\x0e\x17\xef\xde\xb0\x6c\x76\x4f\x30\x0d\xcd\x45\x51\xae\xb7\x94\x1f\xa1\xc2\xaf\x1a\x5c\x8d\x76\xab\xe3\x5d\x65\x71\x65\xbe\x17\x36\xbb\xb8\x1d\xab\x27\x23\xf4\x67\x7e\x16\xcc\x8e\x97\xdf\x5e\xfd\x2f\x00\x00\xff\xff\x8b\xbe\x42\xcf\xe3\x1c\x00\x00"

func fusdCdcBytes() ([]byte, error) {
	return bindataRead(
		_fusdCdc,
		"FUSD.cdc",
	)
}

func fusdCdc() (*asset, error) {
	bytes, err := fusdCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "FUSD.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x16, 0xc0, 0xba, 0x77, 0x62, 0x86, 0xf3, 0xd1, 0x9a, 0xb, 0xe9, 0xfc, 0x2d, 0x8, 0x2e, 0x70, 0x27, 0xe1, 0x6, 0x20, 0x55, 0x8b, 0x61, 0x34, 0x61, 0x11, 0x3e, 0xb0, 0xaf, 0x44, 0x5d, 0xc3}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"FUSD.cdc": fusdCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"FUSD.cdc": {fusdCdc, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
