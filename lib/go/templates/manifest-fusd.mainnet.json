{
  "network": "mainnet",
  "templates": [
    {
      "id": "FUSD.01",
      "name": "Setup FUSD Vault",
      "source": "// This transaction configures the signer's account with an empty FUSD vault.\n//\n// It also links the following capabilities:\n//\n// - FungibleToken.Receiver: this capability allows this account to accept FUSD deposits.\n// - FungibleToken.Balance: this capability allows anybody to inspect the FUSD balance of this account.\n\nimport FungibleToken from 0xf233dcee88fe0abe\nimport FUSD from 0x3c5959b568896393\n\ntransaction {\n\n    prepare(signer: AuthAccount) {\n\n        // It's OK if the account already has a Vault, but we don't want to replace it\n        if(signer.borrow\u003c\u0026FUSD.Vault\u003e(from: /storage/fusdVault) != nil) {\n            return\n        }\n        \n        // Create a new FUSD Vault and put it in storage\n        signer.save(\u003c-FUSD.createEmptyVault(), to: /storage/fusdVault)\n\n        // Create a public capability to the Vault that only exposes\n        // the deposit function through the Receiver interface\n        signer.link\u003c\u0026FUSD.Vault{FungibleToken.Receiver}\u003e(\n            /public/fusdReceiver,\n            target: /storage/fusdVault\n        )\n\n        // Create a public capability to the Vault that only exposes\n        // the balance field through the Balance interface\n        signer.link\u003c\u0026FUSD.Vault{FungibleToken.Balance}\u003e(\n            /public/fusdBalance,\n            target: /storage/fusdVault\n        )\n    }\n}\n",
      "arguments": [],
      "network": "mainnet",
      "hash": "aa7fecdf159e71bd0b029e40b22643fb443161e67796f42bac68e9bab4630e29"
    },
    {
      "id": "FUSD.02",
      "name": "Transfer FUSD",
      "source": "// This transaction withdraws FUSD from the signer's account and deposits it into a recipient account. \n// This transaction will fail if the recipient does not have an FUSD receiver. \n// No funds are transferred or lost if the transaction fails.\n//\n// Parameters:\n// - amount: The amount of FUSD to transfer (e.g. 10.0)\n// - to: The recipient account address.\n//\n// This transaction will fail if either the sender or recipient does not have\n// an FUSD vault stored in their account. To check if an account has a vault\n// or initialize a new vault, use check_fusd_vault_setup.cdc and setup_fusd_vault.cdc\n// respectively.\n\nimport FungibleToken from 0xf233dcee88fe0abe\nimport FUSD from 0x3c5959b568896393\n\ntransaction(amount: UFix64, to: Address) {\n\n    // The Vault resource that holds the tokens that are being transferred\n    let sentVault: @FungibleToken.Vault\n\n    prepare(signer: AuthAccount) {\n        // Get a reference to the signer's stored vault\n        let vaultRef = signer.borrow\u003c\u0026FUSD.Vault\u003e(from: /storage/fusdVault)\n            ?? panic(\"Could not borrow reference to the owner's Vault!\")\n\n        // Withdraw tokens from the signer's stored vault\n        self.sentVault \u003c- vaultRef.withdraw(amount: amount)\n    }\n\n    execute {\n        // Get the recipient's public account object\n        let recipient = getAccount(to)\n\n        // Get a reference to the recipient's Receiver\n        let receiverRef = recipient.getCapability(/public/fusdReceiver)!.borrow\u003c\u0026{FungibleToken.Receiver}\u003e()\n            ?? panic(\"Could not borrow receiver reference to the recipient's Vault\")\n\n        // Deposit the withdrawn tokens in the recipient's receiver\n        receiverRef.deposit(from: \u003c-self.sentVault)\n    }\n}\n",
      "arguments": [
        {
          "type": "UFix64",
          "name": "amount",
          "label": "Amount",
          "sampleValue": "92233720368.54775808"
        },
        {
          "type": "Address",
          "name": "recipient",
          "label": "Recipient",
          "sampleValue": "0xe467b9dd11fa00df"
        }
      ],
      "network": "mainnet",
      "hash": "180cef7053a5f0ae66e19e3a96cc3b9eb7da29767fb5d6938239bf1f8e1dc284"
    }
  ]
}