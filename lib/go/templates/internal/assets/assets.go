// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../transactions/scripts/check_fusd_vault_setup.cdc (868B)
// ../../../transactions/scripts/get_fusd_balance.cdc (737B)
// ../../../transactions/setup_fusd_vault.cdc (1.333kB)
// ../../../transactions/transfer_fusd.cdc (1.714kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsCheck_fusd_vault_setupCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\x41\x8f\xda\x30\x10\x85\xef\xf9\x15\x6f\x2f\x08\x24\x9a\xf4\x8c\x4a\x57\x50\xa0\x5a\xb5\xda\x56\xc0\xf6\x5a\x39\xce\x84\x58\x18\xdb\xb2\xc7\x0b\x68\xb5\xff\xbd\x32\x21\xe9\xa2\xaa\x52\x9b\x53\x26\xf3\xde\xbc\x6f\x1c\x17\x05\xb6\x8d\x0a\x08\xd2\x2b\xc7\xf0\xc4\xd1\x9b\x00\xf6\x91\xa0\x6a\x70\x43\x10\x52\xda\x68\x18\xc1\x91\x54\xb5\xa2\x0a\x8d\x08\x28\x89\x0c\x9c\xb7\x8e\xbc\x3e\x23\x10\x23\x3a\xb0\x45\x0c\x84\xd5\xd3\x66\x31\xce\x8a\x02\xc2\x54\xa8\x85\x0e\x04\xcb\x0d\xf9\xa3\x0a\x94\x67\x45\x91\x5a\x0f\x69\xf8\x9f\xc1\x17\xf5\x18\x49\x91\xb2\x0f\x36\x30\xb4\xda\x93\x3e\x43\x8a\x34\x5b\x05\x70\x23\xf8\x86\x2c\xf1\x18\xcb\x2d\xd3\x15\xe5\xa8\xb8\x81\x30\x17\x16\x3c\x8b\xa8\x39\x25\x63\x6b\x51\xab\xd3\x25\x7a\x7c\x99\x11\x03\x79\x84\xc6\x46\x5d\x81\x4e\x24\x23\x13\xd8\x0b\x13\x84\x64\x65\x4d\x28\x02\x71\x74\x3f\xaf\x51\xb9\xac\x64\xb7\xc1\x77\xe1\xc5\x81\x98\x7c\x98\xa4\xf2\x1d\x44\x55\x79\x0a\x61\x82\x6d\x62\x6b\x0b\xd8\xdb\x43\x64\x0b\xd9\x90\xdc\xe7\x59\xa6\x0e\xce\x7a\xc6\x2a\x9a\x9d\x2a\x35\x6d\xed\x9e\x0c\x6a\x6f\x0f\x78\x7f\x5a\x3d\x3d\x7e\x7e\x98\x7f\x5d\x6e\xbf\x7d\x59\x3e\xce\x16\x8b\xf5\x72\xb3\xe9\x0d\x69\xa3\x5e\xb7\x59\x74\xed\xcc\xc5\x12\x75\x34\x38\x08\x65\x86\x3d\xcc\xac\x7d\x19\x4d\x30\xb7\x56\xe3\x25\x03\x00\x4d\xdc\x23\x4d\xb1\x23\x9e\xb5\x45\x67\x1b\x65\xbd\xcc\x93\x24\xf5\x4c\x7e\x4d\x35\xa6\x9d\x29\xdf\x11\x7f\x12\x4e\x94\x4a\x2b\x3e\x0f\x0b\x17\x4b\xad\x64\x51\xc7\x50\xad\xaf\xfa\xd1\xdd\x65\x44\x7a\xf2\xd2\x7a\x6f\x8f\x1f\x06\x09\x37\xff\x91\x7e\xc6\xcb\xcd\xda\x79\x67\x7a\xfd\x38\x1c\xf5\xb6\xfb\x7b\x18\xa5\x7f\x93\x94\x42\x0b\x23\xe9\x5f\x41\xe6\xad\xfc\xbf\x38\xae\x9e\xbf\x62\xb4\xd7\x14\xc3\xb7\x87\x72\x37\x4d\xfd\x11\x06\x03\x0c\xdf\x20\x5e\x3f\x67\xaf\xd9\xaf\x00\x00\x00\xff\xff\x23\xc4\xe6\xf6\x64\x03\x00\x00"

func scriptsCheck_fusd_vault_setupCdcBytes() ([]byte, error) {
	return bindataRead(
		_scriptsCheck_fusd_vault_setupCdc,
		"scripts/check_fusd_vault_setup.cdc",
	)
}

func scriptsCheck_fusd_vault_setupCdc() (*asset, error) {
	bytes, err := scriptsCheck_fusd_vault_setupCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/check_fusd_vault_setup.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x53, 0x31, 0x55, 0xec, 0x1a, 0xcf, 0xf1, 0x48, 0xa2, 0x5d, 0x11, 0x4e, 0xd4, 0xfa, 0x6a, 0x9a, 0x13, 0xe7, 0x83, 0x66, 0x2b, 0x94, 0xb2, 0x35, 0xa8, 0x47, 0xa5, 0xb0, 0x32, 0xf6, 0xc6, 0x8}}
	return a, nil
}

var _scriptsGet_fusd_balanceCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x92\x4f\x6f\xd3\x40\x10\xc5\xef\xfb\x29\x1e\x3d\x40\x22\x81\xcd\x01\x71\x88\x28\x55\xda\x24\x08\x81\x0a\x6a\x12\xae\xd1\x7a\x3d\x8e\x47\xdd\xec\x5a\xfb\x27\x69\xa8\xfa\xdd\xd1\xae\x13\x13\x84\x4f\x33\x9e\x79\x3f\xbd\x67\x4f\x59\x62\xd5\xb2\x87\x57\x8e\xbb\x00\x47\x21\x3a\xe3\x11\x5a\x42\x25\xb5\x34\x8a\x60\x1b\x48\x03\xa9\x94\x8d\x26\xbc\xf1\x58\xac\x97\x33\xec\x65\xd4\xa1\x10\x65\x29\xca\x12\x3f\xa5\x93\x3b\x0a\xe4\xfc\x24\xb5\xef\x20\xeb\xda\x91\xf7\x13\xac\x5a\x3a\x37\x89\x93\xb0\x27\x10\x5a\xab\x6b\x36\xdb\xfc\xee\x7f\xe4\xa5\xa9\x03\x6b\x8d\x46\xb2\x06\x67\xc4\x71\x60\xd4\x96\x3c\x8c\x0d\x68\xe5\x9e\x92\xcb\x0b\x10\x32\xc6\x42\xb5\xa4\x1e\x93\xf2\x6f\x08\xb4\xd2\x43\xf6\x7b\xb0\x0e\x6c\x38\xb0\xd4\xfc\x9b\x20\x61\xe8\xd0\x4f\xde\x66\x42\xf4\xd4\x23\x36\x4d\xf4\xf5\x26\x4f\x36\x9e\x42\xec\x0a\x55\x2b\x48\x53\x23\x77\x17\xe3\x3c\x70\xe4\x3b\x52\x81\xf7\xa4\x8f\x85\x10\xbc\xeb\xac\x0b\x58\x44\xb3\xe5\x4a\xd3\xca\x3e\x92\x41\xe3\xec\x0e\xef\x9f\x16\xeb\xfb\x2f\x5f\x6f\xbf\xcf\x57\x3f\xbe\xcd\xef\xa7\xb3\xd9\xc3\x7c\xb9\x1c\x04\x29\xd0\xb0\xb7\x9c\x9d\xc7\xa2\x8b\x15\x9a\x68\xb0\x93\x6c\x46\xc3\xf7\x9e\xf6\xc5\x78\x82\xf5\x82\x9f\x3e\x7e\xc0\xb3\x00\x00\x4d\x61\xc8\x7e\x8d\x2d\x85\x69\xdf\x9c\x85\x63\x31\xac\xe5\x04\x0f\xd4\xe0\xfa\xac\x28\xb6\x14\xee\x64\x27\x2b\xd6\x1c\x8e\xa3\xb2\x8b\x95\x66\x55\xa6\xbc\xb7\xfd\x89\x8c\x5f\x65\x79\x7a\x8a\xca\x3a\x67\x0f\x9f\x5e\x27\xb3\xc5\xaf\x04\x7b\xfe\x27\x74\x71\xd2\xbc\x7c\x1e\x8d\x07\xd5\xcd\x0d\x3a\x69\x58\x8d\xae\xee\x6c\xd4\x75\xfe\xa5\x3d\x08\xa7\x75\x38\x6a\xc8\x51\xaa\x82\xcd\x37\x93\xd9\x57\x27\xe7\xfd\xdd\x0e\xe6\x8b\xd3\xed\x8a\x17\xf1\x27\x00\x00\xff\xff\x5a\x2b\x16\x9c\xe1\x02\x00\x00"

func scriptsGet_fusd_balanceCdcBytes() ([]byte, error) {
	return bindataRead(
		_scriptsGet_fusd_balanceCdc,
		"scripts/get_fusd_balance.cdc",
	)
}

func scriptsGet_fusd_balanceCdc() (*asset, error) {
	bytes, err := scriptsGet_fusd_balanceCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/get_fusd_balance.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4a, 0x38, 0x6c, 0x93, 0x4e, 0x2, 0x52, 0xe0, 0x1e, 0xd9, 0xee, 0xcc, 0x96, 0xb4, 0x71, 0xfc, 0xc8, 0xcc, 0xd8, 0x3c, 0xa1, 0x36, 0x96, 0xa6, 0x4d, 0x76, 0x2, 0xb4, 0x9a, 0x74, 0x66, 0xa5}}
	return a, nil
}

var _setup_fusd_vaultCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x53\x41\x4f\xe3\x3c\x10\xbd\xe7\x57\xbc\xef\xf2\x51\x24\x68\xf6\x5c\xb1\x48\xb0\x2d\x2b\xc4\x0a\x24\x0a\x7b\x9f\x24\x93\xc4\xc2\xd8\x91\x3d\xa1\x54\xa8\xff\x7d\x65\x3b\x89\x5a\x6d\x77\x0f\x48\xeb\x93\x65\xbf\x79\xf3\xe6\xcd\x4c\x9e\xe3\xa9\x55\x1e\xe2\xc8\x78\x2a\x45\x59\x83\xd2\x9a\x5a\x35\xbd\x63\x0f\x69\x19\x5e\x35\x86\xdd\x89\x07\x95\xa5\xed\x8d\x60\xa3\xa4\x05\x19\xf0\x6b\x27\x5b\xdc\x3c\xaf\x97\x78\xa3\x5e\xcb\x3c\xcb\xf3\x2c\xcf\x71\x2b\x20\xed\x2d\xb4\x32\x2f\x89\xa2\xb6\x5a\xdb\x8d\x32\x0d\x4a\xea\xa8\x50\x5a\x89\x62\xbf\x18\xf0\xe7\xb8\xe9\x4d\xa3\x0a\xcd\x4f\xf6\x85\xcd\xfc\x91\x4b\x56\x6f\xec\x16\x90\x20\x6d\x0a\xd9\x82\x02\x8d\x4f\xcf\xa3\x1a\xb1\xe1\xca\x9d\x24\x25\x15\x77\xd6\x2b\xf1\xf3\x63\xcc\xd7\xa4\xc9\x94\xfc\x47\x62\x32\xdb\xc2\x56\xdb\xc0\xa9\x8c\xef\xb8\x94\x28\x3f\x12\x17\x29\x16\xb6\x3e\xc8\x3f\xcf\x32\xf5\xda\x59\x27\x87\xa9\x50\x3b\xfb\x8a\x2f\xef\x37\xcf\xf7\xdf\x6f\xaf\x7f\xac\x9e\x1e\xee\x56\xf7\x57\xcb\xe5\xe3\x6a\xbd\x9e\x02\x02\xed\x84\x5b\x2f\xc7\xef\x6c\xbf\x19\x1f\x59\x06\x00\x9d\xe3\x8e\x1c\xcf\x52\x33\x16\xb8\xea\xa5\xbd\x4a\x0a\x4e\x47\x4c\x38\xd1\xfe\x13\x8f\x87\x3b\xa8\x3a\x8a\x1f\x7d\x22\xed\x98\xaa\x2d\x5a\xf2\x20\xfc\x0c\x0d\x3b\x43\xd1\x0b\x36\x8c\xca\x9a\x13\xc1\x86\x92\x9d\x8e\x3b\x4d\x25\x43\xc9\x44\xab\xea\x21\xf3\xbc\xb0\xce\xd9\xcd\xc5\xff\x41\xf0\x3c\xb2\x5c\xce\x42\x0d\x0b\xe4\x5e\xac\xa3\x86\xf3\xba\xf7\x55\xfc\x39\xc5\x7f\x5f\x61\x94\x0e\x0a\xb1\x77\x1c\x4b\xef\xcc\xf4\xb4\x9b\x6e\xfb\x65\x7c\x73\x4c\xc2\x20\x18\xde\x24\xab\x22\x27\xc8\x54\xe8\x7a\x81\x12\x28\x83\x21\xe7\x14\x38\xa8\xf4\xf4\xc6\xb3\x8b\xf3\x28\xb2\x8c\x44\xab\x30\xac\x91\x61\x76\x7a\x06\xb1\x47\xf5\x66\x47\x05\x74\x7d\xa1\x55\xb9\x3f\x2e\x62\xa3\xb5\x49\x90\xb4\x24\xb0\x46\x6f\xc1\xef\x9d\xf5\xec\xf7\x49\x02\x6c\x18\x49\xd4\xbd\x49\x3d\x95\xd6\xd9\xbe\x69\xe3\xe7\x38\xec\x50\x46\xd8\xd5\x54\xfe\x56\x4b\x58\xa3\x7d\xbf\x3f\x8e\x6f\xcb\xee\x72\x76\x60\x72\x9e\x64\xc7\xea\x46\xcc\xd9\x01\x42\xc8\x35\x2c\xc7\x8c\x98\x60\xff\xc8\x91\x71\x97\x6a\xc5\xba\x3a\xb0\x63\xd8\xd0\x4f\xbb\x31\xc4\xff\xcd\x8c\x01\xf2\x09\x2f\xd2\xb0\xee\xb2\x5f\x01\x00\x00\xff\xff\xeb\xda\x1f\x24\x35\x05\x00\x00"

func setup_fusd_vaultCdcBytes() ([]byte, error) {
	return bindataRead(
		_setup_fusd_vaultCdc,
		"setup_fusd_vault.cdc",
	)
}

func setup_fusd_vaultCdc() (*asset, error) {
	bytes, err := setup_fusd_vaultCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "setup_fusd_vault.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x94, 0x4b, 0xcb, 0x60, 0x58, 0xb3, 0xd5, 0xe8, 0x30, 0x4e, 0x36, 0x57, 0x25, 0x12, 0x7, 0xfd, 0x50, 0x5e, 0x7c, 0x93, 0x81, 0xb0, 0x22, 0xc5, 0x53, 0x65, 0x45, 0x1c, 0xfd, 0xa5, 0xb4, 0x8c}}
	return a, nil
}

var _transfer_fusdCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\x5d\x4f\xe3\x3a\x10\x7d\xcf\xaf\x18\x78\xb8\xa4\x12\x24\x5c\xe9\xea\x3e\x54\x7c\xdc\x5e\x4a\xd1\x6a\x57\xec\x8a\x96\xdd\x47\xe4\x3a\x93\xc6\x4b\x6a\x47\xf6\xa4\x85\x45\xfc\xf7\x95\x3d\x49\x48\x28\x20\x6d\x5f\xa0\xf6\xcc\x99\x33\xe7\x8c\xa7\x69\x0a\x8b\x42\x39\x20\x2b\xb4\x13\x92\x94\xd1\xb0\x55\x54\x64\x56\x6c\x1d\xcc\x6e\xe7\x53\xc8\xad\x59\x03\x15\x08\x4e\xad\x34\xda\x03\x07\x42\x4a\x53\x6b\x02\xa1\x33\xc8\xb0\x32\x4e\x91\x03\x45\xa0\x34\x19\x10\x60\x51\xaa\x4a\xa1\x0f\xe0\xc0\x04\xa2\xb7\xeb\x94\x25\xe4\x42\x95\xa0\xf2\x50\xe0\x25\x31\x33\xe8\x40\x1b\x82\x42\x6c\x10\x84\x66\x26\x16\x25\xaa\x0d\x5a\xc6\xbb\x36\x90\xd7\x3a\x73\x20\x2c\x32\x6e\x8e\xd6\x62\x06\xc6\x42\x69\x1c\xb5\xa8\xfd\x92\xbe\x9a\x4b\xa2\x34\xf5\x00\xdf\x84\x15\x6b\x24\xb4\x6e\xec\xbf\x1e\x81\x58\x7b\xb6\x63\x58\x14\xd8\xfc\x0f\x26\xe7\xd2\x64\xba\x12\x10\x63\xb2\x4a\xe0\xef\xe3\xe4\x78\xc4\x79\x64\x38\x67\xa7\x71\x10\x59\x66\xd1\x75\x15\x3f\x96\x00\x15\x15\x68\x59\x6a\xd4\x19\x5a\xdf\xc9\x3b\x9a\x78\xb4\x56\x96\x8d\xa8\x4b\x02\x47\xc6\x37\xaf\xb4\x07\x50\xf6\x45\xfb\x85\x01\x59\xa0\xbc\xf7\x25\x84\xee\xa8\x15\xc2\x81\xe0\x5c\x0f\x66\x2c\x28\xad\x48\x89\x52\xfd\x42\x10\xa0\x71\xcb\x97\x87\x50\x3b\x64\x84\xbb\xbc\x76\xd9\x5d\x38\xbd\x73\x48\x75\x95\xc8\x4c\x86\x29\x08\xdf\x7a\xd7\xfe\xc2\xa3\x5a\x74\x15\x4a\x52\x1b\x2c\x1f\x93\x28\x52\xeb\xca\x58\x82\x59\xad\x57\x6a\x59\xe2\xc2\xdc\xa3\xe6\xf9\x3a\x7e\x98\xdd\x5e\x5f\x7d\xfa\xff\xcb\xe5\xe2\xeb\xe7\xcb\xeb\xc9\x74\x7a\x73\x39\x9f\x77\x09\xdd\x1c\xfa\xb8\xf9\xb4\xbd\x8e\x7a\x5a\xc6\xad\x7b\xb7\x33\xf5\xf0\xef\x3f\x87\xc1\x95\x09\xeb\x3f\x82\xa7\x28\x02\x00\x08\x1e\x20\x7c\x0f\x8a\x59\x74\xa6\xb6\x12\x81\x0a\x41\x50\x98\x32\x73\x3c\x30\x9e\x96\xe3\x53\x3f\x5b\x4b\x54\x7a\xd5\x9f\xb0\x00\x55\x22\x79\x9b\x28\x60\x8d\xe1\xbf\x41\x53\x49\x38\xe5\x9a\x95\xc5\x4a\x58\x8c\xf9\xf9\x8c\x61\x52\x53\x31\x61\x13\x3c\x2f\x68\x3e\x69\x0a\x57\x48\xe1\xf9\xe4\x68\x51\x7b\x5e\x66\xf8\xee\x1a\x8b\xd9\xb3\x36\xcf\xf3\x08\x27\x37\x98\xc3\x69\x13\x9c\x2c\x8d\xb5\x66\x7b\xf2\x97\x57\x8b\xc9\x9c\xc5\x5e\xc0\x31\xa4\x1e\x45\xac\x30\xf5\x6e\x85\x9b\x51\x87\xe5\x3f\xe7\xe7\x50\x09\xad\x64\xbc\x7f\x61\xea\x32\x0b\x13\xc7\x68\xbb\xcc\xcc\x96\x89\x05\x98\xbd\xfd\x51\xd4\xef\xe6\x47\xb3\x46\x5a\x3d\x77\xf7\xc8\x9b\xfd\x38\x2c\xf3\xa4\x13\x16\x4e\x8e\xba\xee\x92\x76\x31\x75\x56\xf3\x5f\xe6\xff\xcc\xc5\xf1\x01\x65\x4d\xb8\x2b\xec\x60\xc1\x1c\x38\xa8\xea\x65\xa9\x64\xf7\x1c\xcc\xf2\x27\xca\xa1\xaa\x2f\x4f\xef\x14\x56\x48\x8d\x67\x31\x99\x61\x9f\xef\xb8\xd6\xaf\x75\xd3\x2c\xae\xd7\xf0\xe1\x90\x7d\xeb\xc2\x93\x15\xd2\x85\xa8\xc4\x52\x95\x8a\x1e\xe3\x94\x79\x06\xb7\x5a\x98\xd1\x5e\xe7\xef\xd3\x70\xec\xda\x88\xe7\xb3\xf8\x0f\x5c\xe5\x9c\x8f\x5b\x08\x6e\xbc\x72\x78\xca\xbb\x3f\xc4\xb6\xde\xe8\xd6\x6e\x5e\x44\x03\x0c\xfb\x5a\x86\x9e\x04\x49\xf3\x43\xd2\x4c\xe9\xc9\xd1\x70\x0e\x5a\x8f\x9f\xa3\xdf\x01\x00\x00\xff\xff\x2c\xd1\x3a\x6e\xb2\x06\x00\x00"

func transfer_fusdCdcBytes() ([]byte, error) {
	return bindataRead(
		_transfer_fusdCdc,
		"transfer_fusd.cdc",
	)
}

func transfer_fusdCdc() (*asset, error) {
	bytes, err := transfer_fusdCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "transfer_fusd.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf3, 0xa, 0xca, 0x2, 0xeb, 0x7f, 0xea, 0x98, 0xc5, 0x53, 0x96, 0xc1, 0xed, 0xa2, 0x4e, 0xac, 0xf7, 0xd8, 0x5b, 0x48, 0xf8, 0x8a, 0x1a, 0x33, 0x7e, 0x7b, 0xae, 0x15, 0x4e, 0x89, 0x85, 0x87}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/check_fusd_vault_setup.cdc": scriptsCheck_fusd_vault_setupCdc,
	"scripts/get_fusd_balance.cdc":       scriptsGet_fusd_balanceCdc,
	"setup_fusd_vault.cdc":               setup_fusd_vaultCdc,
	"transfer_fusd.cdc":                  transfer_fusdCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": {nil, map[string]*bintree{
		"check_fusd_vault_setup.cdc": {scriptsCheck_fusd_vault_setupCdc, map[string]*bintree{}},
		"get_fusd_balance.cdc": {scriptsGet_fusd_balanceCdc, map[string]*bintree{}},
	}},
	"setup_fusd_vault.cdc": {setup_fusd_vaultCdc, map[string]*bintree{}},
	"transfer_fusd.cdc": {transfer_fusdCdc, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
